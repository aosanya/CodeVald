<?xml version="1.0" encoding="UTF-8"?>
<!--SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;-->
<!--SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;-->
<!--SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';-->
CREATE SCHEMA  `sakila` ;
USE `sakila` ;
<entity name="tbltest" schema="sakila">
	<property name="ID1" nullable="false" type="int"></property>
	<property name="ID2" nullable="false" type="int"></property>
	<property name="Col1" null="" precision="45" type="varchar"></property>
	<primarykey>
		<column name="ID1"></column>
		<column name="ID2"></column>
	</primarykey>
</entity>
<!--
  ----------------------------------------------------- Table `sakila`.`actor` -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="actor" schema="sakila">
	<property auto_increment="true" name="actor_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="first_name" nullable="false" precision="45" type="varchar"></property>
	<property name="last_name" nullable="false" precision="45" type="varchar"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="actor_id"></column>
	</primarykey>
	<index name="idx_actor_last_name">
		<column name="last_name" order="ASC"></column>
	</index>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'country' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="country" schema="sakila">
	<property auto_increment="true" name="country_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="country" nullable="false" precision="50" type="varchar"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="country_id"></column>
	</primarykey>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'city' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="city" schema="sakila">
	<property auto_increment="true" name="city_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="city" nullable="false" precision="50" type="varchar"></property>
	<property name="country_id" nullable="false" type="smallint" unsigned="false"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="city_id"></column>
	</primarykey>
	<index name="idx_fk_country_id">
		<column name="country_id" order="ASC"></column>
	</index>
	<constraint name="fk_city_country" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="country">
		<reference column="country_id" referenced="country_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'address' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="address" schema="sakila">
	<property auto_increment="true" name="address_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="address" nullable="false" precision="50" type="varchar"></property>
	<property default="NULL" name="address2" nullable="true" precision="50" type="varchar"></property>
	<property name="district" nullable="false" precision="20" type="varchar"></property>
	<property name="city_id" nullable="false" type="smallint" unsigned="false"></property>
	<property default="NULL" name="postal_code" nullable="true" precision="10" type="varchar"></property>
	<property name="phone" nullable="false" precision="20" type="varchar"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="address_id"></column>
	</primarykey>
	<index name="idx_fk_city_id">
		<column name="city_id" order="ASC"></column>
	</index>
	<constraint name="fk_address_city" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="city">
		<reference column="city_id" referenced="city_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'category' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="category" schema="sakila">
	<property auto_increment="true" name="category_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property name="name" nullable="false" precision="25" type="varchar"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="category_id"></column>
	</primarykey>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'staff' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="staff" schema="sakila">
	<property auto_increment="true" name="staff_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property name="first_name" nullable="false" precision="45" type="varchar"></property>
	<property name="last_name" nullable="false" precision="45" type="varchar"></property>
	<property name="address_id" nullable="false" type="smallint" unsigned="false"></property>
	<property default="NULL" name="picture" nullable="true" type="blob"></property>
	<property default="NULL" name="email" nullable="true" precision="50" type="varchar"></property>
	<property name="store_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property column="1" default="TRUE" name="active" nullable="false" type="tinyint"></property>
	<property name="username" nullable="false" precision="16" type="varchar"></property>
	<property default="NULL" name="password" nullable="true" precision="40" type="binary"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="staff_id"></column>
	</primarykey>
	<index name="idx_fk_store_id">
		<column name="store_id" order="ASC"></column>
	</index>
	<index name="idx_fk_address_id">
		<column name="address_id" order="ASC"></column>
	</index>
	<constraint  name="fk_staff_store" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="store">
		<reference column="store_id" referenced="store_id"></reference>
	</constraint>	<constraint name="fk_staff_address" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="address">
		<reference column="address_id" referenced="address_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'store' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="store" schema="sakila">
	<property auto_increment="true" name="store_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property name="manager_staff_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property name="address_id" nullable="false" type="smallint" unsigned="false"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="store_id"></column>
	</primarykey>
	<uniqueindex name="idx_unique_manager">
		<column name="manager_staff_id" order="ASC"></column>
	</uniqueindex>
	<index name="idx_fk_address_id">
		<column name="address_id" order="ASC"></column>
	</index>
	<constraint  name="fk_store_staff" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="staff">
		<reference column="manager_staff_id" referenced="staff_id"></reference>
	</constraint>	<constraint name="fk_store_address" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="address">
		<reference column="address_id" referenced="address_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'customer' -----------------------------------------------------
-->
<entity *commenttruncated*="" *stableandthestoretablewherethiscustomerisregistered.="" basicinformationaboutthecustomerlikefirstandlastnamearestoredinthetableitself.sameforthedatetherecordwascreatedandwhentheinformationwaslastupdated.*="" comment="Tablestoringallcustomers.Holdsforeignkeystotheaddre" default_character_set="utf8" engine="InnoDB" name="sakila.customer">
	<property auto_increment="true" name="customer_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="store_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property name="first_name" nullable="false" precision="45" type="varchar"></property>
	<property name="last_name" nullable="false" precision="45" type="varchar"></property>
	<property default="NULL" name="email" nullable="true" precision="50" type="varchar"></property>
	<property name="address_id" nullable="false" type="smallint" unsigned="false"></property>
	<property column="1" default="TRUE" name="active" nullable="false" type="tinyint"></property>
	<property name="create_date" nullable="false" type="datetime"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="true" type="timestamp"></property>
	<primarykey>
		<column name="customer_id"></column>
	</primarykey>
	<index name="idx_fk_store_id">
		<column name="store_id" order="ASC"></column>
	</index>
	<index name="idx_fk_address_id">
		<column name="address_id" order="ASC"></column>
	</index>
	<index name="idx_last_name">
		<column name="last_name" order="ASC"></column>
	</index>
	<constraint  name="fk_customer_address" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="address">
		<reference column="address_id" referenced="address_id"></reference>
	</constraint>	<constraint name="fk_customer_store" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="store">
		<reference column="store_id" referenced="store_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'language' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="language" schema="sakila">
	<property auto_increment="true" name="language_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property column="20" name="name" nullable="false" type="char"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="language_id"></column>
	</primarykey>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'film' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="film" schema="sakila">
	<property auto_increment="true" name="film_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="title" nullable="false" precision="255" type="varchar"></property>
	<property default="NULL" name="description" nullable="true" type="text"></property>
	<property default="NULL" name="release_year" nullable="true" type="year"></property>
	<property name="language_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property default="NULL" name="original_language_id" nullable="true" type="tinyint" unsigned="false"></property>
	<property default="3" name="rental_duration" nullable="false" type="tinyint" unsigned="false"></property>
	<property (4,2="" default="4.99" name="rental_rate" nullable="false" type="decimal"></property>
	<property default="NULL" name="length" nullable="true" type="smallint" unsigned="false"></property>
	<property (5,2="" default="19.99" name="replacement_cost" nullable="false" type="decimal"></property>
	<property 'gdefault="" enum="'G','PG','PG-13','R','NC-17'" name="rating" nullable="true"></property>
	<property default="NULL" name="special_features" nullable="true" set="'Trailers','Commentaries','Deleted Scenes','Behind the Scenes'"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<index name="idx_title">
		<column name="title" order="ASC"></column>
	</index>
	<index name="idx_fk_language_id">
		<column name="language_id" order="ASC"></column>
	</index>
	<index name="idx_fk_original_language_id">
		<column name="original_language_id" order="ASC"></column>
	</index>
	<primarykey>
		<column name="film_id"></column>
	</primarykey>
	<constraint  name="fk_film_language" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="language">
		<reference column="language_id" referenced="language_id"></reference>
	</constraint>	<constraint name="fk_film_language_original" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="language">
		<reference column="original_language_id" referenced="language_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'film_actor' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="film_actor" schema="sakila">
	<property name="actor_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="film_id" nullable="false" type="smallint" unsigned="false"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="actor_id"></column>
		<column name="film_id"></column>
	</primarykey>
	<index name="idx_fk_film_id">
		<column name="film_id" order="ASC"></column>
	</index>
	<index name="fk_film_actor_actor_idx">
		<column name="actor_id" order="ASC"></column>
	</index>
	<constraint  name="fk_film_actor_actor" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="actor">
		<reference column="actor_id" referenced="actor_id"></reference>
	</constraint>	<constraint name="fk_film_actor_film" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="film">
		<reference column="film_id" referenced="film_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'film_category' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="film_category" schema="sakila">
	<property name="film_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="category_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="film_id"></column>
		<column name="category_id"></column>
	</primarykey>
	<index name="fk_film_category_category_idx">
		<column name="category_id" order="ASC"></column>
	</index>
	<index name="fk_film_category_film_idx">
		<column name="film_id" order="ASC"></column>
	</index>
	<constraint  name="fk_film_category_film" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="film">
		<reference column="film_id" referenced="film_id"></reference>
	</constraint>	<constraint name="fk_film_category_category" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="category">
		<reference column="category_id" referenced="category_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'film_text' -----------------------------------------------------
-->
<entity engine="MyISAM" name="film_text" schema="sakila">
	<property name="film_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="title" nullable="false" precision="255" type="varchar"></property>
	<property default="NULL" name="description" nullable="true" type="text"></property>
	<primarykey>
		<column name="film_id"></column>
	</primarykey>
<fulltextindex name="idx_title_description">
		<column name="title" order="ASC"></column>
		<column name="description" order="ASC"></column>
</fulltextindex>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'inventory' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="inventory" schema="sakila">
	<property auto_increment="true" name="inventory_id" nullable="false" type="mediumint" unsigned="false"></property>
	<property name="film_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="store_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="inventory_id"></column>
	</primarykey>
	<index name="idx_fk_film_id">
		<column name="film_id" order="ASC"></column>
	</index>
	<index name="idx_store_id_film_id">
		<column name="store_id" order="ASC"></column>
		<column name="film_id" order="ASC"></column>
	</index>
	<index name="fk_inventory_store_idx">
		<column name="store_id" order="ASC"></column>
	</index>
	<constraint  name="fk_inventory_store" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="store">
		<reference column="store_id" referenced="store_id"></reference>
	</constraint>	<constraint name="fk_inventory_film" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="film">
		<reference column="film_id" referenced="film_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'rental' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="rental" schema="sakila">
	<property auto_increment="true" name="rental_id" nullable="false" type="int"></property>
	<property name="rental_date" nullable="false" type="datetime"></property>
	<property name="inventory_id" nullable="false" type="mediumint" unsigned="false"></property>
	<property name="customer_id" nullable="false" type="smallint" unsigned="false"></property>
	<property default="NULL" name="return_date" nullable="true" type="datetime"></property>
	<property name="staff_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="false" type="timestamp"></property>
	<primarykey>
		<column name="rental_id"></column>
	</primarykey>
	<uniqueindex name="">
		<column name="rental_date" order="ASC"></column>
		<column name="inventory_id" order="ASC"></column>
		<column name="customer_id" order="ASC"></column>
	</uniqueindex>
	<index name="idx_fk_inventory_id">
		<column name="inventory_id" order="ASC"></column>
	</index>
	<index name="idx_fk_customer_id">
		<column name="customer_id" order="ASC"></column>
	</index>
	<index name="idx_fk_staff_id">
		<column name="staff_id" order="ASC"></column>
	</index>
	<constraint  name="fk_rental_staff" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="staff">
		<reference column="staff_id" referenced="staff_id"></reference>
	</constraint>	<constraint  name="fk_rental_inventory" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="inventory">
		<reference column="inventory_id" referenced="inventory_id"></reference>
	</constraint>	<constraint name="fk_rental_customer" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="customer">
		<reference column="customer_id" referenced="customer_id"></reference>
	</constraint>
</entity>
<!--
 ----------------------------------------------------- Table 'sakila'.'payment' -----------------------------------------------------
-->
<entity default_character_set="utf8" engine="InnoDB" name="payment" schema="sakila">
	<property auto_increment="true" name="payment_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="customer_id" nullable="false" type="smallint" unsigned="false"></property>
	<property name="staff_id" nullable="false" type="tinyint" unsigned="false"></property>
	<property default="NULL" name="rental_id" nullable="true" type="int"></property>
	<property column="5,2" name="amount" nullable="false" type="decimal"></property>
	<property name="payment_date" nullable="false" type="datetime"></property>
	<property default="CURRENT_TIMESTAMP" name="last_update" nullable="true" type="timestamp"></property>
	<primarykey>
		<column name="payment_id"></column>
	</primarykey>
	<index name="idx_fk_staff_id">
		<column name="staff_id" order="ASC"></column>
	</index>
	<index name="idx_fk_customer_id">
		<column name="customer_id" order="ASC"></column>
	</index>
	<index name="fk_payment_rental_idx">
		<column name="rental_id" order="ASC"></column>
	</index>
	<constraint  delete="" name="fk_payment_rental" null="" on="" onupdate="cascade" schema_referenced="sakila" tbl_referenced="rental" type="set">
		<reference column="rental_id" referenced="rental_id"></reference>
	</constraint>	<constraint  name="fk_payment_customer" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="customer">
		<reference column="customer_id" referenced="customer_id"></reference>
	</constraint>	<constraint name="fk_payment_staff" ondelete="restrict" onupdate="cascade" schema_referenced="sakila" tbl_referenced="staff">
		<reference column="staff_id" referenced="staff_id"></reference>
	</constraint>
</entity>
<!--
USE 'sakila' ;
 ----------------------------------------------------- Placeholder table for view 'sakila'.'customer_list' -----------------------------------------------------
-->
<entity name="customer_list" schema="sakila">
	<property name="ID" type="int"></property>
	<property name="name" type="int"></property>
	<property name="address" type="int"></property>
	<property codename="zip" type="int"></property>
	<property name="phone" type="int"></property>
	<property name="city" type="int"></property>
	<property name="country" type="int"></property>
	<property name="notes" type="int"></property>
	<property name="SID" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- Placeholder table for view 'sakila'.'film_list' -----------------------------------------------------
-->
<entity name="film_list" schema="sakila">
	<property name="FID" type="int"></property>
	<property name="title" type="int"></property>
	<property name="description" type="int"></property>
	<property name="category" type="int"></property>
	<property name="price" type="int"></property>
	<property name="length" type="int"></property>
	<property name="rating" type="int"></property>
	<property name="actors" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- Placeholder table for view 'sakila'.'nicer_but_slower_film_list' -----------------------------------------------------
-->
<entity name="nicer_but_slower_film_list" schema="sakila">
	<property name="FID" type="int"></property>
	<property name="title" type="int"></property>
	<property name="description" type="int"></property>
	<property name="category" type="int"></property>
	<property name="price" type="int"></property>
	<property name="length" type="int"></property>
	<property name="rating" type="int"></property>
	<property name="actors" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- Placeholder table for view 'sakila'.'staff_list' -----------------------------------------------------
-->
<entity name="staff_list" schema="sakila">
	<property name="ID" type="int"></property>
	<property name="name" type="int"></property>
	<property name="address" type="int"></property>
	<property codename="zip" type="int"></property>
	<property name="phone" type="int"></property>
	<property name="city" type="int"></property>
	<property name="country" type="int"></property>
	<property name="SID" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- Placeholder table for view 'sakila'.'sales_by_store' -----------------------------------------------------
-->
<entity name="sales_by_store" schema="sakila">
	<property name="store" type="int"></property>
	<property name="manager" type="int"></property>
	<property name="total_sales" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- Placeholder table for view 'sakila'.'sales_by_film_category' -----------------------------------------------------
-->
<entity name="sales_by_film_category" schema="sakila">
	<property name="category" type="int"></property>
	<property name="total_sales" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- Placeholder table for view 'sakila'.'actor_info' -----------------------------------------------------
-->
<entity name="actor_info" schema="sakila">
	<property name="actor_id" type="int"></property>
	<property name="first_name" type="int"></property>
	<property name="last_name" type="int"></property>
	<property name="film_info" type="int"></property>
</entity>
<!--
 ----------------------------------------------------- procedure rewards_report -----------------------------------------------------
DELIMITER $$
USE 'sakila'$$
CREATE PROCEDURE 'sakila'.'rewards_report' column=
  IN min_monthly_purchases type='tinyint' unsigned='false'
  , IN min_dollar_amount_purchased type='decimal'column=10,2 unsigned='false'
  , OUT count_rewardees type='int'
LANGUAGE SQL
NOT DETERMINISTIC
READS SQL DATA
SQL SECURITY DEFINER
COMMENT 'Provides a customizable report on best customers'
proc: BEGIN
  type='dec'LARE last_month_start type='date';
  type='dec'LARE last_month_end type='date';
  /* Some sanity checks... */
  IF min_monthly_purchases = 0 THEN
    SELECT 'Minimum monthly purchases parameter must be > 0';
    LEAVE proc;
  END IF;
  IF min_dollar_amount_purchased = 0.00 THEN
    SELECT 'Minimum monthly dollar amount purchased parameter must be > $0.00';
    LEAVE proc;
  END IF;
  /* Determine start and end time periods */
  type='set' last_month_start = type='date'_SUB(CURRENT_DATE(, type='int'ERVAL 1 MONTH;
  type='set' last_month_start = STR_TO_DATE(CONCAT(YEAR(last_month_start,'-',MONTH(last_month_start,'-01','%Y-%m-%d';
  type='set' last_month_end = LAST_DAY(last_month_start;
  /*
    Create a temporary storage area for
    Customer IDs.
  */
  CREATE TEMPORARY TABLE tmpCustomer (customer_id type='smallint' unsigned='false' nullable='false' PRIMARY KEY;
  /*
    Find all customers meeting the
    monthly purchase requirements
  */
  INSERT type='int'O tmpCustomer (customer_id
  SELECT p.customer_id
  FROM payment AS p
  WHERE type='date'(p.payment_date BETWEEN last_month_start AND last_month_end
  GROUP BY customer_id
  HAVING SUM(p.amount > min_dollar_amount_purchased
  AND COUNT(customer_id > min_monthly_purchases;
  /* Populate OUT parameter with count of found customers */
  SELECT COUNT(* FROM tmpCustomer type='int'O count_rewardees;
  /*
    Output ALL customer information of matching rewardees.
    Customize output as needed.
  */
  SELECT c.*
  FROM tmpCustomer AS t
  INNER JOIN customer AS c ON t.customer_id = c.customer_id;
  /* Clean up */
  DROP TABLE tmpCustomer;
END$$
DELIMITER ;
 ----------------------------------------------------- function get_customer_balance -----------------------------------------------------
DELIMITER $$
USE 'sakila'$$
CREATE FUNCTION 'sakila'.'get_customer_balance'(p_customer_id type='int', p_effective_date type='datetime' RETURNS type='decimal'(5,2
  DETERMINISTIC
  READS SQL DATA
BEGIN
    #OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A type='date'
    #THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
    #  1 RENTAL FEES FOR ALL PREVIOUS RENTALS
    #  2 ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
    #  3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, type='char'GE THE REPLACEMENT_COST
    #  4) SUBTRACT ALL PAYMENTS MADE BEFORE THE type='date' SPECIFIED
 type='dec'LARE v_rentfees type='decimal'(5,2); #FEES PAID TO RENT THE VIDEOS INITIALLY
 type='dec'LARE v_overfees type='int'EGER;   #LATE FEES FOR PRIOR RENTALS
 type='dec'LARE v_payments type='decimal'(5,2); #SUM OF PAYMENTS MADE PREVIOUSLY
 SELECT IFNULL(SUM(film.rental_rate),0) type='int'O v_rentfees
  FROM film, inventory, rental
  WHERE film.film_id = inventory.film_id
   AND inventory.inventory_id = rental.inventory_id
   AND rental.rental_date <= p_effective_date
   AND rental.customer_id = p_customer_id;
 SELECT IFNULL(SUM(IF((TO_DAYS(rental.return_date) - TO_DAYS(rental.rental_date)) > film.rental_duration,
    ((TO_DAYS(rental.return_date) - TO_DAYS(rental.rental_date)) - film.rental_duration),0)),0) type='int'O v_overfees
  FROM rental, inventory, film
  WHERE film.film_id = inventory.film_id
   AND inventory.inventory_id = rental.inventory_id
   AND rental.rental_date <= p_effective_date
   AND rental.customer_id = p_customer_id;
 SELECT IFNULL(SUM(payment.amount),0) type='int'O v_payments
  FROM payment
  WHERE payment.payment_date <= p_effective_date
  AND payment.customer_id = p_customer_id;
 RETURN v_rentfees + v_overfees - v_payments;
END$$
DELIMITER ;
 ----------------------------------------------------- procedure film_in_stock -----------------------------------------------------
DELIMITER $$
USE `sakila`$$
CREATE PROCEDURE `sakila`.`film_in_stock`(IN p_film_id type='int', IN p_store_id type='int', OUT p_film_count type='int')
READS SQL DATA
BEGIN
   SELECT inventory_id
   FROM inventory
   WHERE film_id = p_film_id
   AND store_id = p_store_id
   AND inventory_in_stock(inventory_id);
   SELECT FOUND_ROWS() type='int'O p_film_count;
END$$
DELIMITER ;
 ----------------------------------------------------- procedure film_not_in_stock -----------------------------------------------------
DELIMITER $$
USE `sakila`$$
CREATE PROCEDURE `sakila`.`film_not_in_stock`(IN p_film_id type='int', IN p_store_id type='int', OUT p_film_count type='int')
READS SQL DATA
BEGIN
   SELECT inventory_id
   FROM inventory
   WHERE film_id = p_film_id
   AND store_id = p_store_id
   AND NOT inventory_in_stock(inventory_id);
   SELECT FOUND_ROWS() type='int'O p_film_count;
END$$
DELIMITER ;
 ----------------------------------------------------- function inventory_held_by_customer -----------------------------------------------------
DELIMITER $$
USE `sakila`$$
CREATE FUNCTION `sakila`.`inventory_held_by_customer`(p_inventory_id type='int') RETURNS type='int'
READS SQL DATA
BEGIN
 type='dec'LARE v_customer_id type='int';
 type='dec'LARE EXIT HANDLER FOR NOT FOUND RETURN NULL;
 SELECT customer_id type='int'O v_customer_id
 FROM rental
 WHERE return_date IS NULL
 AND inventory_id = p_inventory_id;
 RETURN v_customer_id;
END$$
DELIMITER ;
 ----------------------------------------------------- function inventory_in_stock -----------------------------------------------------
DELIMITER $$
USE `sakila`$$
CREATE FUNCTION `sakila`.`inventory_in_stock`(p_inventory_id type='int') RETURNS BOOLEAN
READS SQL DATA
BEGIN
  type='dec'LARE v_rentals type='int';
  type='dec'LARE v_out   type='int';
  #AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE
  #FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED
  SELECT COUNT(*) type='int'O v_rentals
  FROM rental
  WHERE inventory_id = p_inventory_id;
  IF v_rentals = 0 THEN
   RETURN TRUE;
  END IF;
  SELECT COUNT(rental_id) type='int'O v_out
  FROM inventory LEFT JOIN rental USING(inventory_id)
  WHERE inventory.inventory_id = p_inventory_id
  AND rental.return_date IS NULL;
  IF v_out > 0 THEN
   RETURN FALSE;
  ELSE
   RETURN TRUE;
  END IF;
END$$
DELIMITER ;
 ----------------------------------------------------- View `sakila`.`customer_list` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`customer_list`;
USE `sakila`; View structure for view `customer_list`
CREATE OR REPLACE VIEW customer_list
AS
SELECT cu.customer_id AS ID, CONCAT(cu.first_name, _utf8' ', cu.last_name) AS name, a.address AS address, a.postal_code AS `zip code`,
	a.phone AS phone, city.city AS city, country.country AS country, IF(cu.active, _utf8'active',_utf8'') AS notes, cu.store_id AS SID
FROM customer AS cu JOIN address AS a ON cu.address_id = a.address_id JOIN city ON a.city_id = city.city_id
	JOIN country ON city.country_id = country.country_id;
 ----------------------------------------------------- View `sakila`.`film_list` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`film_list`;
USE `sakila`; View structure for view `film_list`
CREATE OR REPLACE VIEW film_list
AS
SELECT film.film_id AS FID, film.title AS title, film.description AS description, category.name AS category, film.rental_rate AS price,
	film.length AS length, film.rating AS rating, GROUP_CONCAT(CONCAT(actor.first_name, _utf8' ', actor.last_name) SEPARATOR ', ') AS actors
FROM category LEFT JOIN film_category ON category.category_id = film_category.category_id LEFT JOIN film ON film_category.film_id = film.film_id
    JOIN film_actor ON film.film_id = film_actor.film_id
	JOIN actor ON film_actor.actor_id = actor.actor_id
GROUP BY film.film_id;
 ----------------------------------------------------- View `sakila`.`nicer_but_slower_film_list` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`nicer_but_slower_film_list`;
USE `sakila`; View structure for view `nicer_but_slower_film_list`
CREATE OR REPLACE VIEW nicer_but_slower_film_list
AS
SELECT film.film_id AS FID, film.title AS title, film.description AS description, category.name AS category, film.rental_rate AS price,
	film.length AS length, film.rating AS rating, GROUP_CONCAT(CONCAT(CONCAT(UCASE(SUBSTR(actor.first_name,1,1)),
	LCASE(SUBSTR(actor.first_name,2,LENGTH(actor.first_name))),_utf8' ',CONCAT(UCASE(SUBSTR(actor.last_name,1,1)),
	LCASE(SUBSTR(actor.last_name,2,LENGTH(actor.last_name)))))) SEPARATOR ', ') AS actors
FROM category LEFT JOIN film_category ON category.category_id = film_category.category_id LEFT JOIN film ON film_category.film_id = film.film_id
    JOIN film_actor ON film.film_id = film_actor.film_id
	JOIN actor ON film_actor.actor_id = actor.actor_id
GROUP BY film.film_id;
 ----------------------------------------------------- View `sakila`.`staff_list` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`staff_list`;
USE `sakila`; View structure for view `staff_list`
CREATE OR REPLACE VIEW staff_list
AS
SELECT s.staff_id AS ID, CONCAT(s.first_name, _utf8' ', s.last_name) AS name, a.address AS address, a.postal_code AS `zip code`, a.phone AS phone,
	city.city AS city, country.country AS country, s.store_id AS SID
FROM staff AS s JOIN address AS a ON s.address_id = a.address_id JOIN city ON a.city_id = city.city_id
	JOIN country ON city.country_id = country.country_id;
 ----------------------------------------------------- View `sakila`.`sales_by_store` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`sales_by_store`;
USE `sakila`; View structure for view `sales_by_store`
CREATE OR REPLACE VIEW sales_by_store
AS
SELECT
CONCAT(c.city, _utf8',', cy.country) AS store
, CONCAT(m.first_name, _utf8' ', m.last_name) AS manager
, SUM(p.amount) AS total_sales
FROM payment AS p
INNER JOIN rental AS r ON p.rental_id = r.rental_id
INNER JOIN inventory AS i ON r.inventory_id = i.inventory_id
INNER JOIN store AS s ON i.store_id = s.store_id
INNER JOIN address AS a ON s.address_id = a.address_id
INNER JOIN city AS c ON a.city_id = c.city_id
INNER JOIN country AS cy ON c.country_id = cy.country_id
INNER JOIN staff AS m ON s.manager_staff_id = m.staff_id
GROUP BY s.store_id
ORDER BY cy.country, c.city;
 ----------------------------------------------------- View `sakila`.`sales_by_film_category` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`sales_by_film_category`;
USE `sakila`; View structure for view `sales_by_film_category` Note that total sales will add up to >100% because some titles belong to more than 1 category
CREATE OR REPLACE VIEW sales_by_film_category
AS
SELECT
c.name AS category
, SUM(p.amount) AS total_sales
FROM payment AS p
INNER JOIN rental AS r ON p.rental_id = r.rental_id
INNER JOIN inventory AS i ON r.inventory_id = i.inventory_id
INNER JOIN film AS f ON i.film_id = f.film_id
INNER JOIN film_category AS fc ON f.film_id = fc.film_id
INNER JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY total_sales DESC;
 ----------------------------------------------------- View `sakila`.`actor_info` -----------------------------------------------------
DROP TABLE IF EXISTS `sakila`.`actor_info`;
USE `sakila`; View structure for view `actor_info`
CREATE OR REPLACE DEFINER=CURRENT_USER SQL SECURITY INVOKER VIEW actor_info
AS
SELECT
a.actor_id,
a.first_name,
a.last_name,
GROUP_CONCAT(DISTINCT CONCAT(c.name, ': ',
		(SELECT GROUP_CONCAT(f.title ORDER BY f.title SEPARATOR ', ')
          FROM sakila.film f
          INNER JOIN sakila.film_category fc
           ON f.film_id = fc.film_id
          INNER JOIN sakila.film_actor fa
           ON f.film_id = fa.film_id
          WHERE fc.category_id = c.category_id
          AND fa.actor_id = a.actor_id
         )
       )
       ORDER BY c.name SEPARATOR '; ')
AS film_info
FROM sakila.actor a
LEFT JOIN sakila.film_actor fa
 ON a.actor_id = fa.actor_id
LEFT JOIN sakila.film_category fc
 ON fa.film_id = fc.film_id
LEFT JOIN sakila.category c
 ON fc.category_id = c.category_id
GROUP BY a.actor_id, a.first_name, a.last_name;
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `sakila`;
DELIMITER $$
USE `sakila`$$
CREATE TRIGGER `ins_film` AFTER INSERT ON `film` FOR EACH ROW BEGIN
  INSERT type='int'O film_text (film_id, title, description)
    VALUES (new.film_id, new.title, new.description);
 END$$
USE `sakila`$$
CREATE TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN
  IF (old.title != new.title) or (old.description != new.description)
  THEN
    UPDATE film_text
      type='set' title=new.title,
        description=new.description,
        film_id=new.film_id
    WHERE film_id=old.film_id;
  END IF;
 END$$
USE `sakila`$$
CREATE TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN
  DELETE FROM film_text WHERE film_id = old.film_id;
 END$$
DELIMITER ;
-->