


codelist.append('\n')
codelist.append('\nImports SakilaTableAdapters')
codelist.append('\n')
for each_entity in o_XML.entities('entity'):
    entityXML = ReadXML.ReadXML(each_entity, True) 
    o_XML = entityXML
    
    codelist.append('\n')
    codelist.append('\n')
    codelist.append('\n<System.ComponentModel.DataObject()> _')
    codelist.append('\nPublic Class ' + entityXML.entityproperty('name') + 'BLL')
    codelist.append('\n')
    codelist.append('\n    Private _' + entityXML.entityproperty('name') + 'Adapter As ' + entityXML.entityproperty('name') + 'TableAdapter = Nothing')
    codelist.append('\n    Protected ReadOnly Property Adapter() As ' + entityXML.entityproperty('name') + 'TableAdapter')
    codelist.append('\n        Get')
    codelist.append('\n            If _' + entityXML.entityproperty('name') + 'Adapter Is Nothing Then')
    codelist.append('\n                _' + entityXML.entityproperty('name') + 'Adapter = New ' + entityXML.entityproperty('name') + 'TableAdapter()')
    codelist.append('\n            End If')
    codelist.append('\n')
    codelist.append('\n            Return _' + entityXML.entityproperty('name') + 'Adapter')
    codelist.append('\n        End Get')
    codelist.append('\n    End Property')
    codelist.append('\n')
    codelist.append('\n    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, True)> _')
    codelist.append('\n    Public Function Get' + entityXML.entityproperty('name') + '() As Sakila.' + entityXML.entityproperty('name') + 'DataTable')
    codelist.append('\n        Return Adapter.Get' + entityXML.entityproperty('name') + '()')
    codelist.append('\n    End Function')
    codelist.append('\n')
    codelist.append('\n    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, False)> _')
    codelist.append('\n    Public Function GetProductByProductID(ByVal productID As Integer) As Sakila.' + entityXML.entityproperty('name') + 'DataTable')
    codelist.append('\n        Return Adapter.GetProductByProductID(productID)')
    codelist.append('\n    End Function')
    codelist.append('\n')
    codelist.append('\n    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, False)> _')
    codelist.append('\n    Public Function Get' + entityXML.entityproperty('name') + 'ByCategoryID(ByVal categoryID As Integer) As Sakila.' + entityXML.entityproperty('name') + 'DataTable')
    codelist.append('\n        Return Adapter.Get' + entityXML.entityproperty('name') + 'ByCategoryID(categoryID)')
    codelist.append('\n    End Function')
    codelist.append('\n')
    codelist.append('\n    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, False)> _')
    codelist.append('\n    Public Function Get' + entityXML.entityproperty('name') + 'BySupplierID(ByVal supplierID As Integer) As Sakila.' + entityXML.entityproperty('name') + 'DataTable')
    codelist.append('\n        Return Adapter.Get' + entityXML.entityproperty('name') + 'BySupplierID(supplierID)')
    codelist.append('\n    End Function')
    codelist.append('\n')
    codelist.append('\n')
    codelist.append('\n        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _')
    codelist.append('\n    Public Function AddProduct(')
    for each_property in o_XML.entities('property'):
        propertyXML = ReadXML.ReadXML(each_property, True) 
        o_XML = propertyXML
        
        codelist.append('\nByVal ' + propertyXML.entityproperty('name') + ' As ' + propertyXML.entityproperty('type') + ',) As Boolean')
    codelist.append('\n        \' Create a new ProductRow instance')
    codelist.append('\n        Dim ' + entityXML.entityproperty('name') + ' As New Sakila.' + entityXML.entityproperty('name') + 'DataTable()')
    codelist.append('\n        Dim product As Sakila.' + entityXML.entityproperty('name') + 'Row = ' + entityXML.entityproperty('name') + '.New' + entityXML.entityproperty('name') + 'Row()')
    codelist.append('\n')
    codelist.append('\n        product.ProductName = productName')
    codelist.append('\n        If Not supplierID.HasValue Then product.SetSupplierIDNull() Else product.SupplierID = supplierID.Value')
    codelist.append('\n        If Not categoryID.HasValue Then product.SetCategoryIDNull() Else product.CategoryID = categoryID.Value')
    codelist.append('\n        If quantityPerUnit Is Nothing Then product.SetQuantityPerUnitNull() Else product.QuantityPerUnit = quantityPerUnit')
    codelist.append('\n        If Not unitPrice.HasValue Then product.SetUnitPriceNull() Else product.UnitPrice = unitPrice.Value')
    codelist.append('\n        If Not unitsInStock.HasValue Then product.SetUnitsInStockNull() Else product.UnitsInStock = unitsInStock.Value')
    codelist.append('\n        If Not unitsOnOrder.HasValue Then product.SetUnitsOnOrderNull() Else product.UnitsOnOrder = unitsOnOrder.Value')
    codelist.append('\n        If Not reorderLevel.HasValue Then product.SetReorderLevelNull() Else product.ReorderLevel = reorderLevel.Value')
    codelist.append('\n        product.Discontinued = discontinued')
    codelist.append('\n')
    codelist.append('\n        \' Add the new product')
    codelist.append('\n        ' + entityXML.entityproperty('name') + '.Add' + entityXML.entityproperty('name') + 'Row(product)')
    codelist.append('\n        Dim rowsAffected As Integer = Adapter.Update(' + entityXML.entityproperty('name') + ')')
    codelist.append('\n')
    codelist.append('\n        \' Return true if precisely one row was inserted, otherwise false')
    codelist.append('\n        Return rowsAffected = 1')
    codelist.append('\n    End Function')
    codelist.append('\n')
    codelist.append('\n    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _')
    codelist.append('\n    Public Function UpdateProduct(ByVal productName As String, ByVal supplierID As Nullable(Of Integer), ByVal categoryID As Nullable(Of Integer), _')
    codelist.append('\n                                    ByVal quantityPerUnit As String, ByVal unitPrice As Nullable(Of Decimal), ByVal unitsInStock As Nullable(Of Short), _')
    codelist.append('\n                                    ByVal unitsOnOrder As Nullable(Of Short), ByVal reorderLevel As Nullable(Of Short), _')
    codelist.append('\n                                    ByVal discontinued As Boolean, ByVal productID As Integer) As Boolean')
    codelist.append('\n        Dim ' + entityXML.entityproperty('name') + ' As Sakila.' + entityXML.entityproperty('name') + 'DataTable = Adapter.GetProductByProductID(productID)')
    codelist.append('\n')
    codelist.append('\n        If ' + entityXML.entityproperty('name') + '.Count = 0 Then')
    codelist.append('\n            \' no matching record found, return false')
    codelist.append('\n            Return False')
    codelist.append('\n        End If')
    codelist.append('\n		')
    codelist.append('\n		')
    for each_property in o_XML.entities('property'):
        propertyXML = ReadXML.ReadXML(each_property, True) 
        o_XML = propertyXML
        
        codelist.append('\n')
        codelist.append('\n			' + entityXML.entityproperty('name') + '.' + propertyXML.entityproperty('name') + ' = ' + propertyXML.entityproperty('name') + '')
        
    codelist.append('\n        ')
    codelist.append('\n        \' Update the product record')
    codelist.append('\n        Dim rowsAffected As Integer = Adapter.Update(product)')
    codelist.append('\n')
    codelist.append('\n        \' Return true if precisely one row was updated, otherwise false')
    codelist.append('\n        Return rowsAffected = 1')
    codelist.append('\n    End Function')
    codelist.append('\n')
    codelist.append('\n    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _')
    codelist.append('\n    Public Function DeleteProduct(ByVal productID As Integer) As Boolean')
    codelist.append('\n        Dim rowsAffected As Integer = Adapter.Delete(productID)')
    codelist.append('\n')
    codelist.append('\n        \' Return true if precisely one row was deleted, otherwise false')
    codelist.append('\n        Return rowsAffected = 1')
    codelist.append('\n    End Function')
    codelist.append('\nEnd Class')
    codelist.append('\n')